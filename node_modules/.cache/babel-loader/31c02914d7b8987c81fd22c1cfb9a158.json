{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport getCurrentDayForecast from '../helpers/getCurrentDayForecast';\nimport getCurrentDayDetailedForecast from '../helpers/getCurrentDayDetailedForecast';\nimport getUpcomingDaysForecast from '../helpers/getUpcomingDaysForecast';\nconst baseUrl = 'https://www.metaweather.com/api/location';\nconst crossDomain = 'https://the-ultimate-api-challenge.herokuapp.com';\nconst requestUrl = `${crossDomain}/${baseUrl}`;\n\nconst useForecast = () => {\n  _s();\n\n  const [isError, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  const getWoeid = async location => {\n    const {\n      data\n    } = await axios(`${requestUrl}/search`, {\n      params: {\n        query: location\n      }\n    });\n\n    if (!data || data.length === 0) {\n      setError('No such location');\n      setLoading(false);\n      return;\n    }\n\n    return data[0];\n  };\n\n  const getForecastData = async woeid => {\n    const {\n      data\n    } = await axios(`${requestUrl}/${woeid}`);\n\n    if (!data || data.length === 0) {\n      setError('Something went wrong');\n      setLoading(false);\n      return;\n    }\n\n    return data;\n  };\n\n  const gatherForecastData = data => {\n    const currentDay = getCurrentDayForecast(data.consolidated_weather[0], data.title);\n    getCurrentDayDetailedForecast;\n    getUpcomingDaysForecast;\n  }; // Call the API\n\n\n  const submitRequest = async location => {\n    setLoading(true);\n    setError(false);\n    const response = await getWoeid(location);\n    if (!(response !== null && response !== void 0 && response.woeid)) return;\n    const data = await getForecastData(response.woeid);\n    if (!data) return;\n    gatherForecastData();\n  };\n\n  return {\n    isError,\n    isLoading,\n    forecast,\n    submitRequest\n  };\n};\n\n_s(useForecast, \"98jJfAbkRG8B5Phem9UEdOko1FU=\");\n\nexport default useForecast;","map":{"version":3,"sources":["/Users/jade/development/weather-app/src/hooks/useForecast.js"],"names":["useState","axios","getCurrentDayForecast","getCurrentDayDetailedForecast","getUpcomingDaysForecast","baseUrl","crossDomain","requestUrl","useForecast","isError","setError","isLoading","setLoading","forecast","setForecast","getWoeid","location","data","params","query","length","getForecastData","woeid","gatherForecastData","currentDay","consolidated_weather","title","submitRequest","response"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,OAAOC,6BAAP,MAA0C,0CAA1C;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AAEA,MAAMC,OAAO,GAAG,0CAAhB;AACA,MAAMC,WAAW,GAAG,kDAApB;AACA,MAAMC,UAAU,GAAI,GAAED,WAAY,IAAGD,OAAQ,EAA7C;;AAEA,MAAMG,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,SAAD,EAAYC,UAAZ,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMe,QAAQ,GAAG,MAAOC,QAAP,IAAoB;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMhB,KAAK,CAAE,GAAEM,UAAW,SAAf,EAAyB;AAACW,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAEH;AAAT;AAAT,KAAzB,CAA5B;;AAEA,QAAI,CAACC,IAAD,IAASA,IAAI,CAACG,MAAL,KAAgB,CAA7B,EAAgC;AAC5BV,MAAAA,QAAQ,CAAC,kBAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AAED,WAAOK,IAAI,CAAC,CAAD,CAAX;AACH,GAVD;;AAYA,QAAMI,eAAe,GAAG,MAAOC,KAAP,IAAiB;AACrC,UAAM;AAACL,MAAAA;AAAD,QAAS,MAAMhB,KAAK,CAAE,GAAEM,UAAW,IAAGe,KAAM,EAAxB,CAA1B;;AACA,QAAI,CAACL,IAAD,IAASA,IAAI,CAACG,MAAL,KAAgB,CAA7B,EAAgC;AAC5BV,MAAAA,QAAQ,CAAC,sBAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AAED,WAAOK,IAAP;AACH,GATD;;AAWA,QAAMM,kBAAkB,GAAIN,IAAD,IAAU;AACjC,UAAMO,UAAU,GAAGtB,qBAAqB,CAACe,IAAI,CAACQ,oBAAL,CAA0B,CAA1B,CAAD,EAA+BR,IAAI,CAACS,KAApC,CAAxC;AACAvB,IAAAA,6BAA6B;AAC7BC,IAAAA,uBAAuB;AAC1B,GAJD,CA5BsB,CAkCtB;;;AACA,QAAMuB,aAAa,GAAG,MAAMX,QAAN,IAAkB;AACpCJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,UAAMkB,QAAQ,GAAG,MAAMb,QAAQ,CAACC,QAAD,CAA/B;AACA,QAAI,EAACY,QAAD,aAACA,QAAD,eAACA,QAAQ,CAAEN,KAAX,CAAJ,EAAsB;AACtB,UAAML,IAAI,GAAG,MAAMI,eAAe,CAACO,QAAQ,CAACN,KAAV,CAAlC;AACA,QAAI,CAACL,IAAL,EAAW;AAEXM,IAAAA,kBAAkB;AACrB,GAVD;;AAYA,SAAO;AACHd,IAAAA,OADG;AAEHE,IAAAA,SAFG;AAGHE,IAAAA,QAHG;AAIHc,IAAAA;AAJG,GAAP;AAMH,CArDD;;GAAMnB,W;;AAuDN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\n\nimport getCurrentDayForecast from '../helpers/getCurrentDayForecast';\nimport getCurrentDayDetailedForecast from '../helpers/getCurrentDayDetailedForecast';\nimport getUpcomingDaysForecast from '../helpers/getUpcomingDaysForecast';\n\nconst baseUrl = 'https://www.metaweather.com/api/location';\nconst crossDomain = 'https://the-ultimate-api-challenge.herokuapp.com';\nconst requestUrl = `${crossDomain}/${baseUrl}`;\n\nconst useForecast = () => {\n    const [isError, setError] = useState(false);\n    const [isLoading, setLoading] = useState(false);\n    const [forecast, setForecast] = useState(null);\n\n    const getWoeid = async (location) => {\n        const { data } = await axios(`${requestUrl}/search`, {params: { query: location }});\n\n        if (!data || data.length === 0) {\n            setError('No such location');\n            setLoading(false);\n            return;\n        }\n\n        return data[0];\n    };\n\n    const getForecastData = async (woeid) => {\n        const {data} = await axios(`${requestUrl}/${woeid}`);\n        if (!data || data.length === 0) {\n            setError('Something went wrong');\n            setLoading(false);\n            return;\n        }\n\n        return data;\n    };\n\n    const gatherForecastData = (data) => {\n        const currentDay = getCurrentDayForecast(data.consolidated_weather[0], data.title);\n        getCurrentDayDetailedForecast\n        getUpcomingDaysForecast\n    }\n\n    // Call the API\n    const submitRequest = async location => {\n        setLoading(true);\n        setError(false);\n\n        const response = await getWoeid(location);\n        if (!response?.woeid) return;\n        const data = await getForecastData(response.woeid)\n        if (!data) return;\n\n        gatherForecastData();\n    };\n\n    return {\n        isError,\n        isLoading,\n        forecast,\n        submitRequest,\n    };\n};\n\nexport default useForecast;"]},"metadata":{},"sourceType":"module"}